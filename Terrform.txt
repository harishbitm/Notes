infrastrucher automation tool 

steps
1. download and install visual studyo code to windows :- "https://code.visualstudio.com/download"
2. doenload packages inside visual studo code a) AWS CLI  b) harishicrop terraform  
3. install AWS CLI in windows  :- https://docs.aws.amazon.com/cli/v1/userguide/install-windows.html
4. creat IAM user with admin permissions in AWS and download access key and secret key
5. Download terraform in windows :- "https://www.terraform.io/downloads"
   after downloading terraform-- untar the file-- copy pakage (.exe file) to the c-drive/windows/system32/ folder
6. creat folder and creat newfile like filename.tf in windows
7. go to visual studo code application open created forlder & click on the created file 
8. Past bellow script in .tf file :- "https://www.fosstechnix.com/creating-ec2-instance-using-terraform/"  (script to creat ec2 instance)
    provider "aws" {
  region     = "us-east-1"
}

resource "aws_instance" "Demo" {
  ami           = "ami-0e472ba40eb589f49"
  instance_type = "t2.micro"
  key_name = "key_pair_name"
  tags = {
    Name = "Demo"
  }
} 

save file "ctrl + s"
9.  go to terminal-- open new terminal 
10. in new terminal-- select command promt & type command "aws configur" :- it will ask the access key and secret key, copy past that key  
11. "terraform init" intilize in command promt
12. ""terraform plan" and " terrform apply" it will ask enter a value type "yes"

in the sameway if you want to create vpc instance, creat new folder and new ".tf" file place the bellow script by changeing regarding region
https://www.fosstechnix.com/how-to-create-vpc-in-aws-using-terraform/ 

# Creating VPC,name, CIDR and Tags
provider "aws" {
region = "us-east-1"
}
resource "aws_vpc" "dev" {
cidr_block           = "10.0.0.0/16"
instance_tenancy     = "default"
enable_dns_support   = "true"
enable_dns_hostnames = "true"
enable_classiclink   = "false"
tags = {
Name = "dev"
}
}
# Creating Public Subnets in VPC
resource "aws_subnet" "dev-public-1" {
vpc_id                  = aws_vpc.dev.id
cidr_block              = "10.0.1.0/24"
map_public_ip_on_launch = "true"
availability_zone       = "ap-south-1a"
tags = {
Name = "dev-public-1"
}
}
resource "aws_subnet" "dev-public-2" {
vpc_id                  = aws_vpc.dev.id
cidr_block              = "10.0.2.0/24"
map_public_ip_on_launch = "true"
availability_zone       = "ap-south-1b"
tags = {
Name = "dev-public-2"
}
}
# Creating Private Subnets in VPC
resource "aws_subnet" "dev-private-1" {
vpc_id                  = aws_vpc.dev.id
cidr_block              = "10.0.3.0/24"
map_public_ip_on_launch = "false"
availability_zone       = "ap-south-1a"
tags = {
Name = "dev-private-1"
}
}
resource "aws_subnet" "dev-private-2" {
vpc_id                  = aws_vpc.dev.id
cidr_block              = "10.0.4.0/24"
map_public_ip_on_launch = "false"
availability_zone       = "ap-south-1b"
tags = {
Name = "dev-private-2"
}
}
# Creating Internet Gateway in AWS VPC
resource "aws_internet_gateway" "dev-gw" {
vpc_id = aws_vpc.dev.id
tags = {
Name = "dev"
}
}
# Creating Route Tables for Internet gateway
resource "aws_route_table" "dev-public" {
vpc_id = aws_vpc.dev.id
route {
cidr_block = "0.0.0.0/0"
gateway_id = aws_internet_gateway.dev-gw.id
}
tags = {
Name = "dev-public-1"
}
}
# Creating Route Associations public subnets
resource "aws_route_table_association" "dev-public-1-a" {
subnet_id      = aws_subnet.dev-public-1.id
route_table_id = aws_route_table.dev-public.id
}
resource "aws_route_table_association" "dev-public-2-a" {
subnet_id      = aws_subnet.dev-public-2.id
route_table_id = aws_route_table.dev-public.id
}
commands :- 
terrform init 
         plan 
         apply 
         destroy
		 
   
notes:- 
  need to wright files in json formet 
  